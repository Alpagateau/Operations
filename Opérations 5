import time
from newNumb import *

# Ce programme prend en compte les nombres négatifs et supérieurs

L=[]

# Fonction associée à l'addition

def plus(L):
    A = []
    for i in range(len(L)):
        for k in range(i + 1, len(L)):  # Commence à l'index suivant de i
            n = L[i] + L[k]
            if n not in M:          # Vérification que n n'est pas déjà dans M
                M.append(n)
            A.append(L + [n])    # Ajoute la nouvelle liste et L à A
            A[-1].pop(k)         # On supprime les éléments qui ont formé n
            A[-1].pop(i)
            main(A[-1])          # On rapelle la fonction main avec la dernière nouvelle liste créée
    return A

# Fonction associée à la soustraction

def moins(L):
    B=[]
    for i in range (len(L)):
        for k in range (len(L)):
            if i==k:
                continue
            n=L[i]-L[k]
            if not(n in M):     # Vérification que n n'est pas déjà dans M
                M.append(n)
            B.append(L+[n])         # Ajoute la nouvelle liste et L à B
            B[-1].pop(k)            # On supprime les éléments qui ont formé n
            B[-1].pop(i)
            main(B[-1])          # On rapelle la fonction main avec la dernière nouvelle liste créée
    return (B)

# Fonction associée à la multiplication

def fois(L):
    C = []
    for i in range(len(L)):
        for k in range(i + 1, len(L)):  # Commence à l'index suivant de i
            n = L[i] * L[k]
            if n not in M:          # Vérification que n n'est pas déjà dans M
                M.append(n)
            C.append(L + [n])  # Ajoute la nouvelle liste et L à C
            C[-1].pop(k)        # On supprime les éléments qui ont formé n
            C[-1].pop(i)
            main(C[-1])          # On rapelle la fonction main avec la dernière nouvelle liste créée
    return C

# Fonction associée à la division

def diviser(L):
    D = []
    for i in range(len(L)):
        for k in range(len(L)):  # Commence à l'index suivant de i
            if L[k] < L[i]:
                if L[k] == 0:           # Pour éviter la division par zéro
                    continue
                if L[i] % L[k] == 0:            # Vérifiaction de la divisibilté de L[i] par L[k]
                    c = L[i]
                    d = L[k]
                    n = c // d
                    if n not in M:          # Vérification que n n'est pas déjà dans M
                        M.append(n)
                    D.append(L + [n])  # Ajoute la nouvelle liste et L à D
                    D[-1].remove(c)     # On supprime les éléments qui ont formé n
                    D[-1].remove(d)
                    main(D[-1])        # On rapelle la fonction main avec la dernière nouvelle liste créée
    return D



M=[]            # Liste finale


def main(L):
    if len(L)==0:
        while True:
            a = input("Entrez un nombre entier à ajouter dans la liste de départ, entrer un autre caractère pour finaliser : ")
            try:
                a = int(a)
                L += [nb(a)]
                print("Liste de départ : " + str(L))
                M.append(L[-1])
            except:
                print("Liste de départ : " + str(L))
                if(len(L)>0):
                    break


    if len(L) <= 1:             # liste d'un seul élément -> stop
        return
    plus(L)
    moins(L)
    fois(L)
    diviser(L)

main(L)
M.sort()                        # pour mettre dans l'ordre


# suppression des éléments non-conformes

k = 0
while k < len(M):
    if M[k] > nb(999) or M[k]<nb(0):
        M.remove(M[k])
    else:
        k += 1

print(M, len(M))

# compteur de temps

t = time.monotonic()
print("Le programme a mis (en secondes) : ", time.monotonic() - t)

# Demande du chemin souhaité à l'utilisateur

p=0   # Condition pour savoir si on affiche le message 1
r=0   # Condition pour savoir si on affiche le message 2
try:
    i=int(input("Entrez une valeur dont vous souhaitez connaitre le chemin :"))
    r=1
except ValueError:
    print("Le nombre entré n'est pas un entier")   # Message d'erreur 2
    p=1
if r==1:
    for l in range (len(M)):   # Boucle qui cherche la valeur demandée dans la liste
            if M[l]==i:
                print(M[l].path)
                p=1

if p==0:
    print("Ce nombre n'est pas constructible ou n'est pas compris entre 0 et 999")      # Message d'erreur 1
